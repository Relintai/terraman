<?xml version="1.0" encoding="UTF-8" ?>
<class name="VoxelChunkDefault" inherits="VoxelChunk" version="3.2">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_build_phase" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="phase" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="_build_phase_physics_process" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="phase" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="_build_phase_process" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="phase" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="_draw_debug_voxel_lights" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="debug_drawer" type="ImmediateGeometry">
			</argument>
			<description>
			</description>
		</method>
		<method name="build_phase">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="build_phase_physics_process">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="build_phase_process">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="clear_mesh_rids">
			<return type="void">
			</return>
			<argument index="0" name="mesh_index" type="int">
			</argument>
			<argument index="1" name="mesh_type_index" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_rids">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="create_colliders">
			<return type="void">
			</return>
			<argument index="0" name="mesh_index" type="int">
			</argument>
			<argument index="1" name="layer_mask" type="int" default="1">
			</argument>
			<description>
			</description>
		</method>
		<method name="create_debug_immediate_geometry">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="create_meshes">
			<return type="void">
			</return>
			<argument index="0" name="mesh_index" type="int">
			</argument>
			<argument index="1" name="mesh_count" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_cross_voxels">
			<return type="void">
			</return>
			<argument index="0" name="max" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_cross_voxels_fill">
			<return type="void">
			</return>
			<argument index="0" name="max" type="Vector3">
			</argument>
			<argument index="1" name="fill" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_debug_voxel_lights">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="draw_debug_voxels">
			<return type="void">
			</return>
			<argument index="0" name="max" type="int">
			</argument>
			<argument index="1" name="color" type="Color" default="Color( 1, 1, 1, 1 )">
			</argument>
			<description>
			</description>
		</method>
		<method name="emit_build_finished">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="free_chunk">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="free_colliders">
			<return type="void">
			</return>
			<argument index="0" name="mesh_index" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="free_debug_immediate_geometry">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="free_index">
			<return type="void">
			</return>
			<argument index="0" name="mesh_index" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="free_meshes">
			<return type="void">
			</return>
			<argument index="0" name="mesh_index" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="free_rids">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="generate_ao">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="generate_random_ao">
			<return type="void">
			</return>
			<argument index="0" name="seed" type="int">
			</argument>
			<argument index="1" name="octaves" type="int" default="4">
			</argument>
			<argument index="2" name="period" type="int" default="30">
			</argument>
			<argument index="3" name="persistence" type="float" default="0.3">
			</argument>
			<argument index="4" name="scale_factor" type="float" default="0.6">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_light">
			<return type="VoxelLight">
			</return>
			<argument index="0" name="index" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_light_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_mesh_rid">
			<return type="RID">
			</return>
			<argument index="0" name="mesh_index" type="int">
			</argument>
			<argument index="1" name="mesh_type_index" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mesh_rid_count">
			<return type="int">
			</return>
			<argument index="0" name="mesh_index" type="int">
			</argument>
			<argument index="1" name="mesh_type_index" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mesh_rid_index">
			<return type="RID">
			</return>
			<argument index="0" name="mesh_index" type="int">
			</argument>
			<argument index="1" name="mesh_type_index" type="int">
			</argument>
			<argument index="2" name="index" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mesh_rids">
			<return type="Dictionary">
			</return>
			<description>
			</description>
		</method>
		<method name="get_meshes">
			<return type="Array">
			</return>
			<argument index="0" name="mesh_index" type="int">
			</argument>
			<argument index="1" name="mesh_type_index" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_meshes">
			<return type="bool">
			</return>
			<argument index="0" name="mesh_index" type="int">
			</argument>
			<argument index="1" name="mesh_type_index" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_next_phase">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="next_phase">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="set_mesh_rid">
			<return type="void">
			</return>
			<argument index="0" name="mesh_index" type="int">
			</argument>
			<argument index="1" name="mesh_type_index" type="int">
			</argument>
			<argument index="2" name="value" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_mesh_rid_index">
			<return type="void">
			</return>
			<argument index="0" name="mesh_index" type="int">
			</argument>
			<argument index="1" name="mesh_type_index" type="int">
			</argument>
			<argument index="2" name="index" type="int">
			</argument>
			<argument index="3" name="value" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_mesh_rids">
			<return type="void">
			</return>
			<argument index="0" name="rids" type="Dictionary">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_meshes">
			<return type="void">
			</return>
			<argument index="0" name="mesh_index" type="int">
			</argument>
			<argument index="1" name="mesh_type_index" type="int">
			</argument>
			<argument index="2" name="meshes" type="Array">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="active_build_phase_type" type="int" setter="set_active_build_phase_type" getter="get_active_build_phase_type" enum="VoxelChunkDefault.ActiveBuildPhaseType">
		</member>
		<member name="build_flags" type="int" setter="set_build_flags" getter="get_build_flags">
		</member>
		<member name="current_build_phase" type="int" setter="set_current_build_phase" getter="get_current_build_phase">
		</member>
		<member name="current_lod_level" type="int" setter="set_current_lod_level" getter="get_current_lod_level" default="0">
		</member>
		<member name="lights_dirty" type="bool" setter="set_lights_dirty" getter="get_lights_dirty">
		</member>
		<member name="lod_num" type="int" setter="set_lod_num" getter="get_lod_num">
		</member>
		<member name="lod_size" type="int" setter="set_lod_size" getter="get_lod_size">
		</member>
		<member name="max_build_phase" type="int" setter="set_max_build_phase" getter="get_max_build_phase">
		</member>
	</members>
	<constants>
		<constant name="BUILD_PHASE_DONE" value="0">
		</constant>
		<constant name="BUILD_PHASE_SETUP" value="1">
		</constant>
		<constant name="BUILD_PHASE_TERRARIN_MESH_SETUP" value="2">
		</constant>
		<constant name="BUILD_PHASE_TERRARIN_MESH_COLLIDER" value="3">
		</constant>
		<constant name="BUILD_PHASE_TERRARIN_MESH" value="5">
		</constant>
		<constant name="BUILD_PHASE_LIGHTS" value="4">
		</constant>
		<constant name="BUILD_PHASE_FINALIZE" value="6">
		</constant>
		<constant name="BUILD_PHASE_MAX" value="7">
		</constant>
		<constant name="VOXEL_CHUNK_STATE_GENERATION_QUEUED" value="1">
		</constant>
		<constant name="VOXEL_CHUNK_STATE_GENERATION" value="2">
		</constant>
		<constant name="VOXEL_CHUNK_STATE_MESH_GENERATION_QUEUED" value="3">
		</constant>
		<constant name="VOXEL_CHUNK_STATE_MESH_GENERATION" value="4">
		</constant>
		<constant name="VOXEL_CHUNK_STATE_MAX" value="5">
		</constant>
		<constant name="DEFAULT_CHANNEL_TYPE" value="0" enum="DefaultChannels">
		</constant>
		<constant name="DEFAULT_CHANNEL_ISOLEVEL" value="1" enum="DefaultChannels">
		</constant>
		<constant name="DEFAULT_CHANNEL_LIGHT_COLOR_R" value="2" enum="DefaultChannels">
		</constant>
		<constant name="DEFAULT_CHANNEL_LIGHT_COLOR_G" value="3" enum="DefaultChannels">
		</constant>
		<constant name="DEFAULT_CHANNEL_LIGHT_COLOR_B" value="4" enum="DefaultChannels">
		</constant>
		<constant name="DEFAULT_CHANNEL_AO" value="5" enum="DefaultChannels">
		</constant>
		<constant name="DEFAULT_CHANNEL_RANDOM_AO" value="6" enum="DefaultChannels">
		</constant>
		<constant name="DEFAULT_CHANNEL_LIQUID_FLOW" value="7" enum="DefaultChannels">
		</constant>
		<constant name="MAX_DEFAULT_CHANNELS" value="8" enum="DefaultChannels">
		</constant>
		<constant name="BUILD_PHASE_TYPE_NORMAL" value="0" enum="ActiveBuildPhaseType">
		</constant>
		<constant name="BUILD_PHASE_TYPE_PROCESS" value="1" enum="ActiveBuildPhaseType">
		</constant>
		<constant name="BUILD_PHASE_TYPE_PHYSICS_PROCESS" value="2" enum="ActiveBuildPhaseType">
		</constant>
		<constant name="MESH_INDEX_TERRARIN" value="0">
		</constant>
		<constant name="MESH_INDEX_PROP" value="1">
		</constant>
		<constant name="MESH_INDEX_LIQUID" value="2">
		</constant>
		<constant name="MESH_INDEX_CLUTTER" value="3">
		</constant>
		<constant name="MESH_TYPE_INDEX_MESH" value="0">
		</constant>
		<constant name="MESH_TYPE_INDEX_MESH_INSTANCE" value="1">
		</constant>
		<constant name="MESH_TYPE_INDEX_SHAPE" value="2">
		</constant>
		<constant name="MESH_TYPE_INDEX_BODY" value="3">
		</constant>
		<constant name="BUILD_FLAG_USE_ISOLEVEL" value="1" enum="BuildFlags">
		</constant>
		<constant name="BUILD_FLAG_USE_LIGHTING" value="2" enum="BuildFlags">
		</constant>
		<constant name="BUILD_FLAG_USE_AO" value="4" enum="BuildFlags">
		</constant>
		<constant name="BUILD_FLAG_USE_RAO" value="8" enum="BuildFlags">
		</constant>
		<constant name="BUILD_FLAG_GENERATE_AO" value="16" enum="BuildFlags">
		</constant>
		<constant name="BUILD_FLAG_AUTO_GENERATE_RAO" value="32" enum="BuildFlags">
		</constant>
		<constant name="BUILD_FLAG_BAKE_LIGHTS" value="64" enum="BuildFlags">
		</constant>
		<constant name="BUILD_FLAG_CREATE_COLLIDER" value="128" enum="BuildFlags">
		</constant>
		<constant name="BUILD_FLAG_CREATE_LODS" value="256" enum="BuildFlags">
		</constant>
	</constants>
</class>
